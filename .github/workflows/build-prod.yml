name: Build-PROD

on:
  workflow_dispatch:
    inputs:
      ghEnvironment:
        description: 'Select GH environment to be source vars, secrets etc'
        type: environment
        required: true

      imageVersion:
        description: 'Image version to be deployed'
        type: string
        required: true
        default: 'prod-0.0.0'

      buildEnviornment:
        description: 'Actual environment for build & deploy'
        type: choice
        required: true
        options:
          - prod

jobs:
  build:
    runs-on: ubuntu-latest

    environment:
      name: prod
      url: https://app.szkolneplatnosci.pl

    env:
      MANIFEST_REPO_NAME: p-tylczak/release_manifest
      MANIFEST_FILE: demo_cicd_prod.manifest
      DOCKER_IMAGE_NAME: paweltylczak/demo-ui
      ENVIRONMENT: prod
      PREV_VERSION_VALUE: do-not-update-manually
      NEXT_VERSION_VALUE: do-not-update-manually
      NODE_VERSION: 22.14.0

    defaults:
      run:
        working-directory: ./app_repo

#    strategy:
#      matrix:
#        environments: [DEV, PROD]

    steps:
      - name: Checkout repo ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          path: app_repo

      - name: Checkout repo ${{ env.MANIFEST_REPO_NAME }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFEST_REPO_NAME }}
          token: ${{ secrets.GH_PAT }}
          path: release_manifest

      - name: Configure git
        run: |
          git config --global user.email "github@actions.com"
          git config --global user.name "pipeline runner"

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run the tests
        run: npm run test

      - name: Build code
        run: npm run build

      - name: Load versions from manifest
        working-directory: ./release_manifest
        run: |
          source ./scripts/setup_version.sh ${{ env.MANIFEST_FILE }} PATCH
          echo "PREV_VERSION_VALUE=$PREV_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION_VALUE=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Echo the next version
        run: echo ${{ env.NEXT_VERSION_VALUE }}

      - name: Build & push image
        run: |
          export DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          ./scripts/docker-build-image.sh ${{ env.ENVIRONMENT }} ${{ env.NEXT_VERSION_VALUE }}

      - name: Append new version to manifest
        working-directory: ./release_manifest
        run: |
          echo "export VERSION=$NEXT_VERSION_VALUE" >> ${{ env.MANIFEST_FILE }}
          git commit -am "[bot] append version ${{ env.NEXT_VERSION_VALUE }}"
          git push

      - name: Amend docker compose version
        run: |
          sed -i 's?${{ env.DOCKER_IMAGE_NAME }}:${{ env.ENVIRONMENT }}-${{ env.PREV_VERSION_VALUE }}?${{ env.DOCKER_IMAGE_NAME}}:${{ env.ENVIRONMENT }}-${{ env.NEXT_VERSION_VALUE }}?g' docker-compose.yaml
          git commit -am "[bot] bump version from ${{ env.PREV_VERSION_VALUE }} to ${{ env.NEXT_VERSION_VALUE }}"
          git push